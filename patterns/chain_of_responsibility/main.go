// поведенческий паттерн проектирования
//позволяет передавать выполнение запросов последовательно по цепочке
//вызывает обраотчик для процессов

//основное примененние
//когда пользователь делает запрос в сервис и внтренний процесс в бекенде
//начинает проводить авторизацию со сложной бизнес логикой - проверка прав пользователя идт
// - цепочка по которой передается запрос

//плюсы
//уменьшение звисимости между клиентом и обработчиками
//каждый обработчик независимо выпполныет свою роль
//изменять логику тоже можно будет незавиимо
//реализует принцип единственной обязанности - каждый сервис выполняет свою роль
//реализует принцип открытости/закрытости

//минусы
//запрос может остаться необработанным из-за нарушения логики

//пример
//взаимодействие нескольких сервисов
//устройство кторое передает данные по протоколу ->
//сервис принимает данные и обрабатыает и передает для охранения ->
//второй сервис сохраняет данные

package main

import (
	"chain_of_responsibility/pkg"
)

// сначала данные передаются от устройства
// затем обновляются
// и сохраняются
// -> каждое звено решает свою задачу и передает процесс следующему звену по цепочке
func main() {
	device := &pkg.Device{Name: "Device-1"}
	updateService := &pkg.UpdateDataService{Name: "Update-1"}
	dataService := &pkg.DataService{}

	device.SetNext(updateService)
	updateService.SetNext(dataService)
	data := &pkg.Data{}
	device.Execute(data)

}
